# -*- org-confirm-babel-evaluate: nil; after-save-hook: (lambda nil (compile "make")); -*-
#+TITLE: DIDC Is Desktop Configuration
#+AUTHOR: tusharhero
#+EMAIL: tusharhero@sdf.org
#+STARTUP: content
#+PROPERTY: header-args :noweb yes :mkdirp yes
* TODO
** DONE Initial configuration
** DONE Add most options to org tables
** DONE Document everything
** DONE Probably use GNU stow or something
** DONE Better org tangling game
* LICENSE NOTICE
  :PROPERTIES:
  :VISIBILITY: folded
  :END:
  The GPLv3 License (GPLv3)

  Copyright © 2024 tusharhero

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
* CONFIGURATION MANAGEMENT
Just some scripts to help out with managing the configuration on the
system.
** Tangling Emacs lisp script
This creates the actual directory structure from this org-document(AKA
tangling).
#+begin_src elisp :tangle tangle.el :shebang #!/bin/env -S emacs --script
  ;; Run this script to `tangle' DIDC from `didc.org', of
  ;; course the only requirement it has is Emacs is itself.
  (message "Loading Org...")
  (require 'org)
  (message "Tangling didc.org...")
  (setq org-confirm-babel-evaluate nil)
  (org-babel-tangle-file "didc.org")
  (message "didc has been tangled!")
#+end_src
** make file
:TODO:
- do the =cp-background= step within Emacs lisp.
:END:
I use [[https://gnu.org/software/stow][GNU Stow]] to automatically sym link everything to the correct
place.
#+begin_src makefile :tangle Makefile
  install: tangle stow
  	echo "We are done!"
#+end_src

The =--no-folding= flag make =stow= not symlink entire directories, it
will just symlink the files individually. This is useful because I
sometimes put some executables in my ~~/.local/bin~ and that propagates
back here, which is not what we need.
#+begin_src makefile :tangle Makefile
  stow: cp-backgrounds
  	stow -t ~ -d ${PWD}/home/ . --no-folding
#+end_src

Tangles the configuration.
#+begin_src makefile :tangle Makefile
  tangle: tangle.el didc.org
  	emacs --script tangle.el
#+end_src

This  step is necessary because I can't use org
babel to automatically copy the backgrounds.
#+begin_src makefile :tangle Makefile
  cp-backgrounds: backgrounds
  	mkdir -p ${PWD}/home/.local/share/backgrounds
  	cp ${PWD}/backgrounds/* ${PWD}/home/.local/share/backgrounds/ -r
#+end_src

Makefile command for installing Archlinux dependencies,
#+begin_src makefile :tangle Makefile
  arch-install-deps: archpkglist
  	pacman -S - < archpkglist
#+end_src
* HELPERS
These are some Emacs lisp noweb blocks which are used to do some
literate configuration magic through out this document.
#+NAME: default
|-|
#+name: getvar
#+begin_src elisp :var table=default variable=default :results raw :wrap src elisp
  (cadr (assoc variable table))
#+end_src
#+name: getallkeyvaluepairs
#+begin_src elisp :var table=default :tangle no :wrap src conf-space
(mapconcat (lambda (key) (format "%s %s" (car key) (cadr key))) table "\n")
#+end_src
* PACKAGES
So, we have this table to document all the packages that are needed
for this configuration to work. Currently, I only document the names
of the Arch Linux packages.
#+name: packages
| package           | archlinux        | description                                                                  |
|-------------------+------------------+------------------------------------------------------------------------------|
| Sway              | =sway=             | The Wayland compositing window manager                                       |
| Swaybg            | =swaybg=           | Wallpaper tool for Wayland compositors                                       |
| Swaylock          | =swaylock=         | Screen locker for Wayland                                                    |
| Foot              | =foot=             | Fast, lightweight, and minimalistic Wayland terminal emulator                |
| GNU Emacs         | =emacs-wayland=    | Emacs, it is used to detangle this package                                   |
| GNU Stow          | =stow=             | It is used to sym link the configuration to correct places                   |
| Iosevka Nerd font | =ttf-iosevka-nerd= | Default font used in our configuration                                       |
| Grim              | =grim=             | Grab images from a Wayland compositor                                        |
| Slurp             | =slurp=            | Select a region in a Wayland compositor and print it to the standard output. |
| Wf-recorder       | =wf-recorder=      | Utility program for screen recording                                         |
| Kmonad            | =kmonad=           | Used for keyboard configuration                                              |

#+name: getpkglist
#+begin_src elisp :var table=packages n=1 :tangle no
  (mapconcat (lambda (key) (format "%s" (string-trim (nth n key) "=" "="))) table "\n")
#+end_src

#+begin_src conf-unix :tangle archpkglist
 <<getpkglist(packages,1)>>
#+end_src
* WINDOW MANAGER
I am currently using [[https://swaywm.org/][Sway]].
** Configuration skeleton
It is just that, a /skeleton/, I just put some things which need to be
at the top here.
#+begin_src conf-space :tangle home/.config/sway/config
  <<set-pref-prog>>

  bar {
   <<statusbar>>
  }

  include /etc/sway/config.d/*
#+end_src
** Basic
:PROPERTIES:
:header-args: :tangle home/.config/sway/config
:END:
This makes it possible to use Emacs frames and the =C-x 5 o= keybinding
(Switching frames).
#+begin_src conf-space :tangle home/.config/sway/config
  focus_on_window_activation focus
#+end_src

Make borders thin, this also has the effect of hiding the title bars
by default.
#+begin_src conf-space :tangle home/.config/sway/config
  default_border pixel 1
#+end_src
** Background
The wallpapers are stored in backgrounds, they need to be in =~/.local/share/backgrounds/=.
#+begin_src conf-space :tangle home/.config/sway/config
output * bg  ~/.local/share/backgrounds/rain.jpg fill
#+end_src
** Status bar
This is the configuration for the status bar, the thing is shown at
the top of the screen, I have kept it very simple, currently I use
=swaybar= which is pretty bare bones. This might change in the future though.
#+begin_src conf-space :noweb-ref statusbar
  position top
  mode dock
  status_command "$HOME/.local/bin/didc_status_command"
  height 0
  colors {
  <<statusbar-colors>>
  }
#+end_src

Extract the name of the GNU/Linux™ operating system from
=/etc/os-release=. This information is then used to generate text on the
status bar. The result is directly embedded in the status bar script
and only runs at tangle time.
#+name: distribution-name
#+begin_src elisp
  (let* ((distribution
  	(save-excursion
  	  (find-file "/etc/os-release")
  	  (goto-char (point-min))
  	  (search-forward "ID" nil t)
  	  (string-trim (cadr (split-string
  			      (thing-at-point 'line t) "=")))))

         (guix (if (file-directory-p "/gnu/") " "))
         (nix (if (file-directory-p "/nix/") " "))

         (distribution (pcase distribution
  		       ("parabola" " ")
  		       ("hyperbola" " ")
  		       ("arch" " ")
  		       ("guix" nil)
  		       ("nix" nil)
  		       ("debian" " ")
  		       ("trisquel" " ")
  		       ("ubuntu" " ")
  		       ("fedora" " ")
  		       ("gentoo" " ")
  		       (_ distribution)))

         (name-list `("GNU" ,guix ,nix ,distribution "Linux")))
    (upcase-initials
     (string-join
      (remq nil name-list)  "/")))
#+end_src

This is the script that generates text on the status bar.
#+begin_src sh :tangle home/.local/bin/didc_status_command :shebang #!/bin/sh
  while true;
  do
      date=$(date +'%Y-%m-%d Q-%q %a %H:%M:%S');
      volume=$(pactl get-sink-volume @DEFAULT_SINK@ | cut -d'/' -f2 | tr -d '% ' | head -n 1);
      muted=$(pactl get-sink-mute @DEFAULT_SINK@ | cut -d' ' -f 2)
      volume_symbol="";
      if [ "$muted" = "yes" ]
      then
  	volume_symbol="󰖁 ";
      fi
      echo "<<distribution-name()>> $volume_symbol$volume% $date";
  done
#+end_src
** Preferred Programs
#+NAME: pref-programs
| variable | value | Description       |
|----------+-------+-------------------|
| $term    | foot  | Terminal emulator |
Currently I have only set the terminal emulator here, but I will add some other
programs here in the future.
#+begin_src conf-space :noweb-ref set-pref-prog
set <<getallkeyvaluepairs(pref-programs)>>
#+end_src
* SCREEN CAPTURE
For all the screen capturing shenanigans.
** Screenshot
I want to take screenshots peacefully.
#+begin_src sh :tangle home/.local/bin/screenshot :shebang #!/bin/sh
  mkdir -p "$HOME/Pictures/screenshots/"
  grim -g "$(slurp)" "$HOME/Pictures/screenshots/$(date +'%s_screenshot.png')"
#+end_src
** Screen Recording
And sometimes, I would like to record videos too.
#+begin_src sh :tangle home/.local/bin/screenrecord :shebang #!/bin/sh
  mode="$1"
  case $mode in
      start )
          mkdir -p "$HOME/Videos/screenrecordings/"
          wf-recorder -g "$(slurp)" -f "$HOME/Videos/screenrecordings/$(date +'%s_screenrecording.mp4')"
          ;;
      stop ) pkill --signal SIGINT wf-recorder ;;
  esac
#+end_src
* MENU
I used to use =wmenu=, but there were quite a few problems with it:
1. I didn't really use it much, except for running shell commands.
2. Its =readline= support was inferior to =bash=. And since I use Emacs
   keybindings this is very important to me. There are also a few
   other conveniences offered by =bash=, like shell history, and
   completions not available here.

My solution to these problems is to *JUST DIRECTLY USE BASH INSIDE A
FOOT WINDOW* ...

This gives us the following advantages:
1. One package less to install. Which will ultimately make it easier
   to add support for more distributions.
2. All Bash commands just work™. Which includes good Emacs =readline=
   support.

And hence we have =fmenu=, It is a menu but really isn't so its we can
say it's a /fake/ menu.

Runs the =fmenu= script inside of =foot=. We have set an =app_id= of
=fmenu=, which will be used by us to position it as a menu.

#+begin_src sh :tangle home/.local/bin/didc_fmenu_run :shebang #!/bin/sh
  foot -a="fmenu" bash --init-file $1
#+end_src

Here, we select windows with =fmenu= app_id, and position them as needed.
#+begin_src conf-space :noweb-ref set-pref-prog
  set $menu "$HOME/.local/bin/didc_fmenu_run $HOME/.local/bin/didc_fmenu_command_runner"
  for_window [app_id="fmenu"] {
  	   floating enable
  	   border none
  	   resize set width 100ppt, resize set height 10ppt
  	   move position 0 0
   }
#+end_src

I wanted the menu to exit automatically after the first command (as
was the behavior of =wmenu=). But there isn't really a simple way to do
this. So I use =trap= to run a function immediately after the user
enters a command (~DEBUG~). Store the current bash command, then run it.
I also have =sleep= for 1s to allow us to read any output. The ~init~
variables are there to make sure that this doesn't kill itself before
the interactive session starts.
#+begin_src sh :tangle home/.local/bin/didc_fmenu_command_runner :shebang #!/bin/sh
  init=true
  PS1='fmenu> '
  wait_execute_and_exit() {
      command="$BASH_COMMAND"
      if [ "$first_command" = false ]; then
        eval "$command &"
        sleep 0.5
        exit
      fi
      first_command=false
  }
  trap 'wait_execute_and_exit' DEBUG
#+end_src

* LOCK SCREEN
We use swaylock as our lock screen.
#+begin_src conf-unix :tangle home/.config/swaylock/config
  show-failed-attempts
  ignore-empty-password
#+end_src

#+begin_src conf-unix :tangle home/.config/swaylock/config
  indicator-radius=150
  indicator-thickness=30
#+end_src

The background for the lock screen.
#+begin_src conf-unix :tangle home/.config/swaylock/config
  image=~/.local/share/backgrounds/the_star_and_stars.png
#+end_src
* TERMINAL
Because most programs don't recognize =foot= anyway, I changed it to
to =xterm-256color=.
#+begin_src conf-unix :tangle home/.config/foot/foot.ini
  [main]
  term=xterm-256color
#+end_src
* KEYBINDINGS
** Kmonad
:TODO:
- Add instructions on how to enable this.
:END:
[[https://github.com/kmonad/kmonad][Kmonad]] allows me to change the ~CAPSLOCK~ key to an ~ESC~ key, which
is pretty useful for Evil(Vim).
*** Setup
#+begin_src lisp :tangle home/.config/kmonad/default.kbd
  (defcfg
      input  (device-file "/dev/input/by-id/usb-413c_Dell_KB216_Wired_Keyboard-event-kbd")
    output (uinput-sink "DIDC Kmonad output")

    cmp-seq ralt    ;; Set the compose key to `RightAlt'

    ;; Comment this is you want unhandled events not to be emitted
    fallthrough true

    ;; Set this to false to disable any command-execution in KMonad
    allow-cmd true)
#+end_src

I use this Systemd user service to run it at start up. Follow this
[[https://github.com/kmonad/kmonad/blob/master/doc/faq.md][guide]], before trying to enable this service though.
#+begin_src conf-toml :tangle home/.config/systemd/user/kmonad.service
[Unit]
Description=kmonad keyboard config

[Service]
Restart=always
RestartSec=3
ExecStart=/bin/env kmonad .config/kmonad/default.kbd
Nice=-20

[Install]
WantedBy=default.target
#+end_src
*** Keybindings
#+begin_src lisp :tangle home/.config/kmonad/default.kbd
  (defsrc
      esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12        ssrq slck pause
      grv  1    2    3    4    5    6    7    8    9    0    -    =  \ bspc  ins  home pgup  nlck kp/  kp*  kp-
      tab  q    w    e    r    t    y    u    i    o    p    [    ]          del  end  pgdn  kp7  kp8  kp9  kp+
      caps a    s    d    f    g    h    j    k    l    ;    '    ret                        kp4  kp5  kp6
      lsft z    x    c    v    b    n    m    ,    .    /    rctl                 up         kp1  kp2  kp3  kprt
      lctl lmet lalt           spc            ralt rmet cmp  rsft            left down rght  kp0  kp.
      )

  (deflayer div
      esc f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12        ssrq slck pause
      grv  1    2    3    4    5    6    7    8    9    0    -    =  \ bspc  ins  home pgup  nlck kp/  kp*  kp-
      tab  q    w    e    r    t    y    u    i    o    p    [    ]          del  end  pgdn  kp7  kp8  kp9  kp+
      esc  a    s    d    f    g    h    j    k    l    ;    '    ret                        kp4  kp5  kp6
      lsft z    x    c    v    b    n    m    ,    .    /    rctl                 up         kp1  kp2  kp3  kprt
      lctl lmet lalt           spc         ralt rmet cmp  rsft            left down rght  kp0  kp.
      )
#+end_src
** Window manager
:PROPERTIES:
:header-args: :tangle home/.config/sway/config :noweb yes
:END:
I use tables to set the keybindings. It uses a little bit of Emacs
lisp and noweb references to achieve this.
*** Set keys
#+name: set-keys
| variable | value | description                                                |
|----------+-------+------------------------------------------------------------|
| $mod     | Mod4  | Basically, the Meta key (we don't talk about W****** here) |
#+begin_src conf-space
set <<getallkeyvaluepairs(set-keys)>>
#+end_src
*** Basic
#+NAME: basic-keybinds
| key bind          | command       | description                   |
|-------------------+---------------+-------------------------------|
| $mod+Return       | exec $term    | Start terminal emulator       |
| $mod+Shift+q      | kill          | Kill focused window           |
| $mod+d            | exec $menu    | Start launcher                |
| $mod+Shift+c      | reload        | Reload the configuration file |
| $mod+Ctrl+Shift+l | exec swaylock | Lock the desktop              |

#+begin_src conf-space
bindsym <<getallkeyvaluepairs(basic-keybinds)>>
#+end_src

Drag floating windows by holding down =$mod= and =left mouse button=.
Resize them with =right mouse button= + =$mod=. Despite the name, also
works for non-floating windows. Change normal to inverse to use left
mouse button for resizing and right mouse button for dragging.
#+begin_src conf-space
floating_modifier $mod normal
#+end_src

*** Sound
The volume changing sound effect command.
#+begin_src conf-space
set $volume_sound paplay /usr/share/sounds/freedesktop/stereo/audio-volume-change.oga
#+end_src

#+NAME: volume-keybinds
| key bind             | command                                                                          | description     |
|----------------------+----------------------------------------------------------------------------------+-----------------|
| XF86AudioMute        | exec $volume_sound && pactl set-sink-mute @DEFAULT_SINK@ toggle && $volume_sound | Mute audio      |
| XF86AudioRaiseVolume | exec pactl set-sink-volume @DEFAULT_SINK@ +5% && $volume_sound                   | Increase volume |
| XF86AudioLowerVolume | exec pactl set-sink-volume @DEFAULT_SINK@ -5% && $volume_sound                   | Decrease volume |

#+begin_src conf-space
  bindsym <<getallkeyvaluepairs(volume-keybinds)>>
#+end_src

*** Favorite programs
#+NAME: fav-programs
| shortcut | program               | description   |
|----------+-----------------------+---------------|
| e        | emacsclient -nc -a '' | Start emacs   |
| f        | chromium              | Start browser |

#+name: get-fav-keybinds
#+begin_src elisp :var table=default :tangle no :wrap src conf-space
(mapconcat (lambda (key) (format "bindsym $mod+a+%s exec %s &" (car key) (cadr key))) table "\n")
#+end_src
#+begin_src conf-space
<<get-fav-keybinds(fav-programs)>>
#+end_src
*** Moving around
#+NAME: move-keybinds
| key bind         | command       | description         |
|------------------+---------------+---------------------|
| $mod+Left        | focus left    | Move focus          |
| $mod+Down        | focus down    |                     |
| $mod+Up          | focus up      |                     |
| $mod+Right       | focus right   |                     |
| $mod+Shift+Left  | move left  25 | Move focused window |
| $mod+Shift+Down  | move down  25 |                     |
| $mod+Shift+Up    | move up    25 |                     |
| $mod+Shift+Right | move right 25 |                     |
#+begin_src conf-space
bindsym <<getallkeyvaluepairs(move-keybinds)>>
#+end_src
*** Workspaces
The noweb shenanigans here are a bit more complicated, that is so
because I don't want to repeat the name of workspaces again and again.
#+name: workspace-config-gen
#+begin_src elisp :var format=switch-workspace-format :wrap src conf-space :tangle no
(mapconcat (lambda (keybind) (format format keybind keybind) ) '(1 2 3 4 5 6 7 8 9 0))
#+end_src
**** Switch Workspaces keybinds
#+name: switch-workspace-format
#+begin_example format
  bindsym $mod+%d workspace number %d
#+end_example
#+begin_src conf-space
<<workspace-config-gen(switch-workspace-format)>>
#+end_src
**** Move focused container to workspace
#+name: move-focused-workspace-format
#+begin_example format
  bindsym $mod+Shift+%d move container to workspace number %d
#+end_example
#+begin_src conf-space
<<workspace-config-gen(move-focused-workspace-format)>>
#+end_src
*** Layout
#+NAME: layout-keybinds
| key bind         | command             | description                                               |
|------------------+---------------------+-----------------------------------------------------------|
| $mod+h           | splith              | horizontal split                                          |
| $mod+v           | splitv              | vertical split                                            |
| $mod+n           | split none          | disable any splitting in current focus                    |
| $mod+s           | layout stacking     | stacking layout                                           |
| $mod+w           | layout tabbed       | tabbed layout                                             |
| $mod+e           | layout toggle split | toggle split layout                                       |
| $mod+f           | fullscreen          | Make the current focus full screen                        |
| $mod+Shift+space | floating toggle     | Toggle the current focus between tiling and floating mode |
| $mod+space       | focus mode_toggle   | Swap focus between the tiling area and the floating area  |
| $mod+Shift+a     | focus parent        | Move focus to the parent container                        |
#+begin_src conf-space
bindsym <<getallkeyvaluepairs(layout-keybinds)>>
#+end_src
*** Resizing containers
#+NAME: resizing-containers-keybinds
| key bind   | command                   | description                   |
|------------+---------------------------+-------------------------------|
| $mod+Left  | resize shrink width 10px  | Resize the focused containers |
| $mod+Down  | resize grow height 10px   |                               |
| $mod+Up    | resize shrink height 10px |                               |
| $mod+Right | resize grow width 10px    |                               |
| Return     | mode "default"            |                               |
| Escape     | mode "default"            | Return to default mode        |
#+begin_src conf-space
  mode "resize" {
       bindsym <<getallkeyvaluepairs(resizing-containers-keybinds)>>
  }
  bindsym $mod+r mode "resize"
#+end_src
* FONTS
** Parameters
#+name: font-settings
| variable  | value      |
|-----------+------------|
| font-name | Iosevka NF |
| font-size | 14         |
I set the fonts for everything here, just update this and everything
else is updated.
** Terminal emulator
#+begin_src conf-unix :tangle home/.config/foot/foot.ini  :noweb-prefix no
  [main]
  font=<<getvar(table=font-settings,variable="font-name")>>:size=<<getvar(table=font-settings,variable="font-size")>>
  dpi-aware=yes
#+end_src
** Window manager
#+name: Font
#+begin_src conf-space  :tangle home/.config/sway/config
  font '<<getvar(table=font-settings,variable="font-name")>>' <<getvar(table=font-settings,variable="font-size")>>
#+end_src
* COLORS
** Parameters
#+name: basic-colors
| color      | hexvalue |
|------------+----------|
| background | "000000" |
| foreground | "ffffff" |
| alpha      | 0.65     |
I set the colors for everything here, although sections may have their
own table for some custom colors.

This is used to get the transparency as a hex number.
#+name: get-alpha-as-hex
#+begin_src elisp :var table=basic-colors
  (format "%X" (* 255 (cadr (assoc "alpha" table))))
#+end_src
** Terminal emulator
#+begin_src conf-unix :tangle home/.config/foot/foot.ini
  [colors]
  background=<<getvar(table=basic-colors,variable="background")>>
  foreground=<<getvar(table=basic-colors,variable="foreground")>>
  alpha=<<getvar(table=basic-colors,variable="alpha")>>
#+end_src
** Status bar
#+name: statusbar-inactive-colors
| color         | hex value |
|---------------+-----------|
| border        | "505050"  |
| inactive-text | "505050"  |
#+begin_src conf-space :noweb-ref statusbar-colors
statusline #<<getvar(table=basic-colors,variable="foreground")>>
background #<<getvar(table=basic-colors,variable="background")>><<get-alpha-as-hex()>>
separator #<<getvar(table=basic-colors,variable="foreground")>>
inactive_workspace #<<getvar(table=statusbar-inactive-colors,variable="border")>> #<<getvar(table=basic-colors,variable="background")>> #<<getvar(table=statusbar-inactive-colors,variable="inactive-text")>>
#+end_src
** Lock screen
#+begin_src conf-unix :tangle home/.config/swaylock/config
color=<<getvar(table=basic-colors,variable="background")>>
#+end_src
