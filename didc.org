# -*- after-save-hook: (org-babel-tangle); org-confirm-babel-evaluate: nil; -*-
#+TITLE: DIDC Is Desktop Configuration
#+AUTHOR: tusharhero
#+EMAIL: tusharhero@sdf.org
#+STARTUP: content
#+PROPERTY: header-args: :noweb yes :mkdirp yes
* TODO
** TODO Initial configuration
** DONE Add most options to org tables
** TODO Document everything
** TODO Probably use GNU stew or something
** TODO Better org tangling game
* LICENSE NOTICE
  :PROPERTIES:
  :VISIBILITY: folded
  :END:
  The GPLv3 License (GPLv3)

  Copyright Â© 2024 tusharhero

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
* HELPERS
#+NAME: default
|-|
#+name: getvar
#+begin_src elisp :var table=default variable=default :results raw :wrap src elisp
  (cadr (assoc variable table))
#+end_src
#+name: getallkeyvaluepairs
#+begin_src elisp :var table=default :tangle no :wrap src conf-space
(mapconcat (lambda (key) (format "%s %s" (car key) (cadr key))) table "\n")
#+end_src
* WINDOW MANAGER
** Configuration skeleton
#+begin_src conf-space :tangle config/sway/config :noweb yes
<<set-pref-prog>>

bar {
<<statusbar>>
}

include /etc/sway/config.d/*
#+end_src
** Idle
This will lock your screen after 300 seconds of inactivity, then turn
off your displays after another 300 seconds, and turn your screens
back on when resumed. It will also lock your screen before your
computer goes to sleep.
#+name:  idle-config
| parameter | value | description                     |
|-----------+-------+---------------------------------|
| lock      |   300 | Seconds to wait before locking  |
| sleep     |   600 | Seconds to wait before sleeping |
#+begin_src conf-space :tangle config/sway/config :noweb yes
exec swayidle -w \
         timeout <<getvar(idle-config,"lock")>> 'swaylock -f -c 000000' \
         timeout <<getvar(idle-config,"sleep")>> 'swaymsg "output * power off"' resume 'swaymsg "output * power on"' \
         before-sleep 'swaylock -f -c 000000'
#+end_src
** Background
The wallpapers are stored in backgrounds, they need to be in =~/.local/share/backgrounds/=.
#+begin_src conf-space :tangle config/sway/config :noweb yes
output * bg  ~/.local/share/backgrounds/man-standing-infront-of-light.jpeg fill
#+end_src
** Gaps
#+begin_src conf-space :tangle config/sway/config :noweb yes
 gaps inner 10
#+end_src
** Status bar
:PROPERTIES:
:header-args: :noweb-ref statusbar 
:END:
#+begin_src conf-space :noweb yes
position top
mode dock
status_command while date +'%Y-%m-%d Q-%q %a %H:%M:%S' ; do sleep 1; done
height 0
colors {
   <<statusbar-colors>>
}
#+end_src
** Preferred Programs
:PROPERTIES:
:header-args: :tangle no :noweb-ref set-pref-prog
:END:
#+NAME: pref-programs
| variable | value | Description       |
|----------+-------+-------------------|
| $term    | foot  | Terminal emulator |

This contains pipes and hence it is impossible to add it to the table.
#+begin_src conf-space
set $menu wmenu_run
#+end_src

#+begin_src conf-space :noweb yes
set <<getallkeyvaluepairs(pref-programs)>>
#+end_src
* TERMINAL
Because most programs don't recognize =foot= anyway, I changed it to
to =xterm-256color=.
#+begin_src conf-unix :tangle config/foot/foot.ini
  [main]
  term=xterm-256color
#+end_src
* KEYBINDINGS
** Kmonad
:TODO:
- Add instructions on how to enable this.
:END:
[[https://github.com/kmonad/kmonad][Kmonad]] allows me to change the ~CAPSLOCK~ key to an ~ESC~ key, which
is pretty useful for Evil(Vim).
#+begin_src lisp :tangle config/kmonad/default.kbd :mkdirp yes
  (defcfg
      input  (device-file "/dev/input/by-id/usb-413c_Dell_KB216_Wired_Keyboard-event-kbd")
    output (uinput-sink "DIDC Kmonad output")

    cmp-seq ralt    ;; Set the compose key to `RightAlt'

    ;; Comment this is you want unhandled events not to be emitted
    fallthrough true

    ;; Set this to false to disable any command-execution in KMonad
    allow-cmd true)

  (defsrc
      esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12        ssrq slck pause
      grv  1    2    3    4    5    6    7    8    9    0    -    =  \ bspc  ins  home pgup  nlck kp/  kp*  kp-
      tab  q    w    e    r    t    y    u    i    o    p    [    ]          del  end  pgdn  kp7  kp8  kp9  kp+
      caps a    s    d    f    g    h    j    k    l    ;    '    ret                        kp4  kp5  kp6
      lsft z    x    c    v    b    n    m    ,    .    /    rctl                 up         kp1  kp2  kp3  kprt
      lctl lmet lalt           spc            ralt rmet cmp  rsft            left down rght  kp0  kp.
      )

  (deflayer div
      esc f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12        ssrq slck pause
      grv  1    2    3    4    5    6    7    8    9    0    -    =  \ bspc  ins  home pgup  nlck kp/  kp*  kp-
      tab  q    w    e    r    t    y    u    i    o    p    [    ]          del  end  pgdn  kp7  kp8  kp9  kp+
      esc  a    s    d    f    g    h    j    k    l    ;    '    ret                        kp4  kp5  kp6
      lsft z    x    c    v    b    n    m    ,    .    /    rctl                 up         kp1  kp2  kp3  kprt
      lctl lmet lalt           spc         ralt rmet cmp  rsft            left down rght  kp0  kp.
      )
#+end_src
** Window manager
:PROPERTIES:
:header-args: :tangle config/sway/config
:END:
*** Set keys
#+name: set-keys
| variable | value | description                                                |
|----------+-------+------------------------------------------------------------|
| $mod     | Mod4  | Basically, the Meta key (we don't talk about W****** here) |
| $left    | h     | Just Vi keybindings.                                       |
| $down    | j     |                                                            |
| $up      | k     |                                                            |
| $right   | l     |                                                            |
#+begin_src conf-space :noweb yes
set <<getallkeyvaluepairs(set-keys)>>
#+end_src
*** Basic
#+NAME: basic-keybinds
| key bind     | command    | description                   |
|--------------+------------+-------------------------------|
| $mod+Return  | exec $term | Start terminal emulator       |
| $mod+Shift+q | kill       | Kill focused window           |
| $mod+d       | exec $menu | Start launcher                |
| $mod+Shift+c | reload     | Reload the configuration file |

#+begin_src conf-space :noweb yes
bindsym <<getallkeyvaluepairs(basic-keybinds)>>
#+end_src

Drag floating windows by holding down $mod and left mouse
button. Resize them with right mouse button + $mod.  Despite the name,
also works for non-floating windows.  Change normal to inverse to use
left mouse button for resizing and right mouse button for dragging.
#+begin_src conf-space 
floating_modifier $mod normal
#+end_src

Exit sway (logs you out of your Wayland session).
#+begin_src conf-space
bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
#+end_src
*** Moving around
#+NAME: move-keybinds
| key bind          | command     | description             |
|-------------------+-------------+-------------------------|
| $mod+$left        | focus left  | Move focus              |
| $mod+$down        | focus down  |                         |
| $mod+$up          | focus up    |                         |
| $mod+$right       | focus right |                         |
| $mod+Left         | focus left  | Move focus (Vi version) |
| $mod+Down         | focus down  |                         |
| $mod+Up           | focus up    |                         |
| $mod+Right        | focus right |                         |
| $mod+Shift+$left  | move left   | Move focused window     |
| $mod+Shift+$down  | move down   |                         |
| $mod+Shift+$up    | move up     |                         |
| $mod+Shift+$right | move right  |                         |
| $mod+Shift+Left   | move left   | Move focused window     |
| $mod+Shift+Down   | move down   |                         |
| $mod+Shift+Up     | move up     |                         |
| $mod+Shift+Right  | move right  |                         |
#+begin_src conf-space :noweb yes
bindsym <<getallkeyvaluepairs(move-keybinds)>>
#+end_src
*** Workspaces
#+name: workspace-config-gen
#+begin_src elisp :var format=switch-workspace-format :wrap src conf-space :tangle no 
(mapconcat (lambda (keybind) (format format keybind keybind) ) '(1 2 3 4 5 6 7 8 9 0))
#+end_src
**** Switch Workspaces keybinds
#+name: switch-workspace-format
#+begin_example format 
  bindsym $mod+%d workspace number %d
#+end_example
#+begin_src conf-space :noweb yes
<<workspace-config-gen(switch-workspace-format)>>
#+end_src
**** Move focused container to workspace
#+name: move-focused-workspace-format
#+begin_example format 
  bindsym $mod+Shift+%d move container to workspace number %d
#+end_example
#+begin_src conf-space :noweb yes
<<workspace-config-gen(move-focused-workspace-format)>>
#+end_src
*** Layout
#+NAME: layout-keybinds
| key bind         | command             | description                                               |
|------------------+---------------------+-----------------------------------------------------------|
| $mod+b           | splith              | horizontal split                                          |
| $mod+v           | splitv              | vertical split                                            |
| $mod+s           | layout stacking     | stacking layout                                           |
| $mod+w           | layout tabbed       | tabbed layout                                             |
| $mod+e           | layout toggle split | toggle split layout                                       |
| $mod+f           | fullscreen          | Make the current focus full screen                        |
| $mod+Shift+space | floating toggle     | Toggle the current focus between tiling and floating mode |
| $mod+space       | focus mode_toggle   | Swap focus between the tiling area and the floating area  |
| $mod+a           | focus parent        | Move focus to the parent container                        |
#+begin_src conf-space :noweb yes
bindsym <<getallkeyvaluepairs(layout-keybinds)>>
#+end_src
*** Scratchpad
#+NAME: scratchpad-keybinds
| key bind         | command         | description                                                            |
|------------------+-----------------+------------------------------------------------------------------------|
| $mod+Shift+minus | move scratchpad | Move the currently focused window to the scratchpad                    |
| $mod+minus       | scratchpad show | Show the next scratchpad window or hide the focused scratchpad window. |

Sway has a "scratchpad", which is a bag of holding for windows. You
can send windows there and get them back later.
#+begin_src conf-space :noweb yes
bindsym <<getallkeyvaluepairs(scratchpad-keybinds)>>
#+end_src
*** Resizing containers
#+NAME: resizing-containers-keybinds
| key bind    | command                   | description                               |
|-------------+---------------------------+-------------------------------------------|
| $mod+$left  | resize shrink width 10px  | Resize the focused containers             |
| $mod+$down  | resize grow height 10px   |                                           |
| $mod+$up    | resize shrink height 10px |                                           |
| $mod+$right | resize grow width 10px    |                                           |
| $mod+Left   | resize shrink width 10px  | Resize the focused containers(arrow keys) |
| $mod+Down   | resize grow height 10px   |                                           |
| $mod+Up     | resize shrink height 10px |                                           |
| $mod+Right  | resize grow width 10px    |                                           |
| Return      | mode "Default"            |                                           |
| Escape      | mode "Default"            | Return to default mode                    |
#+begin_src conf-space :noweb yes
  mode "resize" {
       bindsym <<getallkeyvaluepairs(resizing-containers-keybinds)>>
  }
  bindsym $mod+r mode "resize"
#+end_src
* FONTS
** Parameters
#+name: font-settings
| variable  | value      |
|-----------+------------|
| font-name | Iosevka NF |
| font-size | 14         |
** Terminal emulator
#+begin_src conf-unix :tangle config/foot/foot.ini :noweb yes :noweb-prefix no
  [main]
  font=<<getvar(table=font-settings,variable="font-name")>>:size=<<getvar(table=font-settings,variable="font-size")>>
  dpi-aware=yes
#+end_src
** Window manager
#+name: Font
#+begin_src conf-space :noweb yes :tangle config/sway/config
  font '<<getvar(table=font-settings,variable="font-name")>>' <<getvar(table=font-settings,variable="font-size")>>
#+end_src
* COLORS
:PROPERTIES:
:header-args: :noweb yes
:END:
** Parameters
#+name: basic-colors
| color      | hexvalue |
|------------+----------|
| background | "000000" |
| foreground | "ffffff" |
| alpha      | 0.65     |
** Terminal emulator
#+begin_src conf-unix :tangle config/foot/foot.ini
  [colors]
  background=<<getvar(table=basic-colors,variable="background")>>
  foreground=<<getvar(table=basic-colors,variable="foreground")>>
  alpha=<<getvar(table=basic-colors,variable="alpha")>>
#+end_src
** Status bar
#+name: statusbar-inactive-colors
| color         | hex value |
|---------------+-----------|
| border        | "505050"  |
| inactive-text | "505050"  |
#+begin_src conf-space :noweb-ref statusbar-colors
statusline #<<getvar(table=basic-colors,variable="foreground")>>
background #<<getvar(table=basic-colors,variable="background")>>
separator #<<getvar(table=basic-colors,variable="foreground")>>
inactive_workspace #<<getvar(table=statusbar-inactive-colors,variable="border")>> #<<getvar(table=basic-colors,variable="background")>> #<<getvar(table=statusbar-inactive-colors,variable="inactive-text")>>
#+end_src
** Lock screen
#+begin_src conf-unix :tangle config/swaylock/config
color=<<getvar(table=basic-colors,variable="background")>>
#+end_src
