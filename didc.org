# -*- after-save-hook: (org-babel-tangle); org-confirm-babel-evaluate: nil; -*-
#+TITLE: DIDC Is Desktop Configuration
#+AUTHOR: tusharhero
#+EMAIL: tusharhero@sdf.org
#+STARTUP: content
#+PROPERTY: header-args :noweb yes :mkdirp yes
* TODO
** DONE Initial configuration
** DONE Add most options to org tables
** DONE Document everything
** DONE Probably use GNU stow or something
** DONE Better org tangling game
* LICENSE NOTICE
  :PROPERTIES:
  :VISIBILITY: folded
  :END:
  The GPLv3 License (GPLv3)

  Copyright Â© 2024 tusharhero

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
* CONFIGURATION MANAGEMENT
Just some scripts to help out with managing the configuration on the system.
** Tangling Emacs lisp script
This creates the actual directory structure from this org-document(AKA
tangling).
#+begin_src elisp :tangle tangle.el :shebang #!/usr/bin/emacs --script
  ;; Run this script to `tangle' DIDC from `didc.org', of
  ;; course the only requirement it has is Emacs is itself.
  (message "Loading Org...")
  (require 'org)
  (message "Tangling didc.org...")
  (setq org-confirm-babel-evaluate nil)
  (org-babel-tangle-file "didc.org")
  (message "didc has been tangled!")
#+end_src
** make file
:TODO:
- do the =cp-background= step within Emacs lisp.
:END:
I use [[https://gnu.org/software/stow][GNU Stow]] to automatically sym link everything to the correct
place. The =cp-backgrounds= step is necessary because I can't use org
babel to automatically copy the backgrounds.
#+begin_src makefile :tangle Makefile
  install: tangle stow
	  echo "We are done!"
  stow: cp-backgrounds
	  stow -t ~ -d ${PWD}/home/ .
  tangle: tangle.el didc.org
	  emacs --script tangle.el
  cp-backgrounds: backgrounds
	  mkdir -p ${PWD}/home/.local/share/
	  cp ${PWD}/backgrounds ${PWD}/home/.local/share/backgrounds -r
  arch-install-deps: archpkglist
	  pacman -S - < archpkglist
#+end_src
* HELPERS
These are some Emacs lisp noweb blocks which are used to do some
literate configuration magic through out this document.
#+NAME: default
|-|
#+name: getvar
#+begin_src elisp :var table=default variable=default :results raw :wrap src elisp
  (cadr (assoc variable table))
#+end_src
#+name: getallkeyvaluepairs
#+begin_src elisp :var table=default :tangle no :wrap src conf-space
(mapconcat (lambda (key) (format "%s %s" (car key) (cadr key))) table "\n")
#+end_src
* PACKAGES
So, we have this table to document all the packages that are needed
for this configuration to work. Currently, I will only document the
names of the Arch Linux packages.
#+name: packages
| package           | archlinux          | description                                                                  |
|-------------------+--------------------+------------------------------------------------------------------------------|
| Sway              | =sway=             | The Wayland compositing window manager                                       |
| Swaybg            | =swaybg=           | Wallpaper tool for Wayland compositors                                       |
| Swaylock          | =swaylock=         | Screen locker for Wayland                                                    |
| Foot              | =foot=             | Fast, lightweight, and minimalistic Wayland terminal emulator                |
| GNU Emacs         | =emacs-wayland=    | Emacs, it is used to detangle this package                                   |
| GNU Stow          | =stow=             | It is used to sym link the configuration to correct places                   |
| Iosevka Nerd font | =ttf-iosevka-nerd= | Default font used in our configuration                                       |
| Wmenu             | =wmenu=            | Menu/Application launcher                                                    |
| Grim              | =grim=             | Grab images from a Wayland compositor                                        |
| Slurp             | =slurp=            | Select a region in a Wayland compositor and print it to the standard output. |
| Wf-recorder       | =wf-recorder=      | Utility program for screen recording                                         |
| Kmonad            | =kmonad=           | Used for keyboard configuration                                              |

#+name: getpkglist
#+begin_src elisp :var table=packages n=1 :tangle no
  (mapconcat (lambda (key) (format "%s" (string-trim (nth n key) "=" "="))) table "\n")
#+end_src

#+begin_src conf-unix :tangle archpkglist
 <<getpkglist(packages,1)>>
#+end_src
* WINDOW MANAGER
I am currently using [[https://swaywm.org/][Sway]].
** Configuration skeleton
It is just that, a /skeleton/, I just put some things which need to be
at the top here.
#+begin_src conf-space :tangle home/.config/sway/config
<<set-pref-prog>>

bar {
<<statusbar>>
}

include /etc/sway/config.d/*
#+end_src
** Idle
This will lock your screen after 300 seconds of inactivity, then turn
off your displays after another 300 seconds, and turn your screens
back on when resumed. It will also lock your screen before your
computer goes to sleep.
#+name:  idle-config
| parameter | value | description                     |
|-----------+-------+---------------------------------|
| lock      |   300 | Seconds to wait before locking  |
| sleep     |   600 | Seconds to wait before sleeping |
#+begin_src conf-space :tangle home/.config/sway/config
exec swayidle -w \
         timeout <<getvar(idle-config,"lock")>> 'swaylock -f -c 000000' \
         timeout <<getvar(idle-config,"sleep")>> 'swaymsg "output * power off"' resume 'swaymsg "output * power on"' \
         before-sleep 'swaylock -f -c 000000'
#+end_src
** Background
The wallpapers are stored in backgrounds, they need to be in =~/.local/share/backgrounds/=.
#+begin_src conf-space :tangle home/.config/sway/config
output * bg  ~/.local/share/backgrounds/man-standing-infront-of-light.jpeg fill
#+end_src
** Gaps
#+begin_src conf-space :tangle home/.config/sway/config
 gaps inner 10
#+end_src
** Status bar
This is the configuration for the status bar, the thing is shown at
the top of the screen, I have kept it very simple, currently I use
=swaybar= which is pretty bare bones. This might change in the future though.
#+begin_src conf-space :noweb-ref statusbar
  position top
  mode dock
  status_command while date +'%Y-%m-%d Q-%q %a %H:%M:%S' ; do sleep 1; done
  height 0
  colors {
  <<statusbar-colors>>
  }
#+end_src
** Preferred Programs
#+NAME: pref-programs
| variable | value | Description       |
|----------+-------+-------------------|
| $term    | foot  | Terminal emulator |
Currently I have only set the terminal emulator here, but I add some other
programs here in the future.
#+begin_src conf-space :noweb-ref set-pref-prog
set <<getallkeyvaluepairs(pref-programs)>>
#+end_src
* SCREEN CAPTURE
For all the screen capturing shenanigans.
** Screenshot
I want to take screenshots peacefully.
#+begin_src sh :tangle home/.local/bin/screenshot :shebang #!/bin/sh
  mkdir -p "$HOME/Pictures/screenshots/"
  grim -g "$(slurp)" "$HOME/Pictures/screenshots/$(date +'%s_screenshot.png')"
#+end_src
** Screen Recording
And sometimes, I would like to record videos too.
#+begin_src sh :tangle home/.local/bin/screenrecord :shebang #!/bin/sh
  mode="$1"
  case $mode in
      start )
          mkdir -p "$HOME/Videos/screenrecordings/"
          wf-recorder -g "$(slurp)" -f "$HOME/Videos/screenrecordings/$(date +'%s_screenrecording.mp4')"
          ;;
      stop ) pkill --signal SIGINT wf-recorder ;;
  esac
#+end_src
* MENU
I use [[https://git.sr.ht/~adnano/wmenu/][Wmenu]] as the menu/command launcher whatever you call it. 
#+begin_src conf-space :noweb-ref set-pref-prog
set $menu "~/.local/bin/didc_wmenu_run"
#+end_src

I have this custom script here because I don't like how the default
=wmenu_run= script works. Particularly, you can't type an arbitrary
command in there, you have to select any of the binaries from the menu
that comes up. This is very inconvenient for me since I do have to
give some arguments or run a piped command to start some program from
the menu, for example starting =emacsclient= is impossible to do with
the default =wmenu_run= script.

This =didc_wmenu_run= script is adapted from [[https://git.sr.ht/~adnano/wmenu/tree/master/item/wmenu_run][the default wmenu script]].
#+begin_src sh :tangle home/.local/bin/didc_wmenu_run :shebang #!/bin/sh
  cachedir="${XDG_CACHE_HOME:-"$HOME/.cache"}"
  cache="$cachedir/wmenu_run"

  [ -d "$cachedir" ] || mkdir -p "$cachedir"

  uptodate() {
      [ -f "$cache" ] || return 1
      IFS=:
      for path in $PATH; do
          # non-POSIX
          test "$path" -nt "$cache" && return 1
      done
      return 0
  }

  bins() {
      IFS=:
      for path in $PATH; do
          for bin in "$path"/*; do
              [ -x "$bin" ] && echo "${bin##*/}"
          done
      done
  }

  path() {
      if uptodate; then
          cat "$cache"
      else
          bins | sort -u | tee "$cache"
      fi
  }

  path_direct() {
      bins | sort -u
  }

  path_direct | wmenu <<menu-font>> <<menu-colors>> -l 4 | xargs -0 sh -c
#+end_src

And, a script to delete the cached list to force it to reload the items.
#+begin_src sh :tangle home/.local/bin/wmenu_reload :shebang #!/bin/sh
  cachedir="${XDG_CACHE_HOME:-"$HOME/.cache"}"
  cache="$cachedir/wmenu_run"
  rm $cache
#+end_src
* TERMINAL
Because most programs don't recognize =foot= anyway, I changed it to
to =xterm-256color=.
#+begin_src conf-unix :tangle home/.config/foot/foot.ini
  [main]
  term=xterm-256color
#+end_src
* KEYBINDINGS
** Kmonad
:TODO:
- Add instructions on how to enable this.
:END:
[[https://github.com/kmonad/kmonad][Kmonad]] allows me to change the ~CAPSLOCK~ key to an ~ESC~ key, which
is pretty useful for Evil(Vim).
#+begin_src lisp :tangle home/.config/kmonad/default.kbd
  (defcfg
      input  (device-file "/dev/input/by-id/usb-413c_Dell_KB216_Wired_Keyboard-event-kbd")
    output (uinput-sink "DIDC Kmonad output")

    cmp-seq ralt    ;; Set the compose key to `RightAlt'

    ;; Comment this is you want unhandled events not to be emitted
    fallthrough true

    ;; Set this to false to disable any command-execution in KMonad
    allow-cmd true)

  (defsrc
      esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12        ssrq slck pause
      grv  1    2    3    4    5    6    7    8    9    0    -    =  \ bspc  ins  home pgup  nlck kp/  kp*  kp-
      tab  q    w    e    r    t    y    u    i    o    p    [    ]          del  end  pgdn  kp7  kp8  kp9  kp+
      caps a    s    d    f    g    h    j    k    l    ;    '    ret                        kp4  kp5  kp6
      lsft z    x    c    v    b    n    m    ,    .    /    rctl                 up         kp1  kp2  kp3  kprt
      lctl lmet lalt           spc            ralt rmet cmp  rsft            left down rght  kp0  kp.
      )

  (deflayer div
      esc f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12        ssrq slck pause
      grv  1    2    3    4    5    6    7    8    9    0    -    =  \ bspc  ins  home pgup  nlck kp/  kp*  kp-
      tab  q    w    e    r    t    y    u    i    o    p    [    ]          del  end  pgdn  kp7  kp8  kp9  kp+
      esc  a    s    d    f    g    h    j    k    l    ;    '    ret                        kp4  kp5  kp6
      lsft z    x    c    v    b    n    m    ,    .    /    rctl                 up         kp1  kp2  kp3  kprt
      lctl lmet lalt           spc         ralt rmet cmp  rsft            left down rght  kp0  kp.
      )
#+end_src
** Window manager
:PROPERTIES:
:header-args: :tangle home/.config/sway/config :noweb yes
:END:
I have taken a peculiar approach, going with one of the [[TODO]] that
I had, I have used tables to set the keybindings. This uses a little
bit of Emacs lisp and noweb references to achieve this.
*** Set keys
#+name: set-keys
| variable | value | description                                                |
|----------+-------+------------------------------------------------------------|
| $mod     | Mod4  | Basically, the Meta key (we don't talk about W****** here) |
| $left    | h     | Just Vi keybindings.                                       |
| $down    | j     |                                                            |
| $up      | k     |                                                            |
| $right   | l     |                                                            |
#+begin_src conf-space
set <<getallkeyvaluepairs(set-keys)>>
#+end_src
*** Basic
#+NAME: basic-keybinds
| key bind          | command       | description                   |
|-------------------+---------------+-------------------------------|
| $mod+Return       | exec $term    | Start terminal emulator       |
| $mod+Shift+q      | kill          | Kill focused window           |
| $mod+d            | exec $menu    | Start launcher                |
| $mod+Shift+c      | reload        | Reload the configuration file |
| $mod+Ctrl+Shift+l | exec swaylock | Lock the desktop              |

#+begin_src conf-space
bindsym <<getallkeyvaluepairs(basic-keybinds)>>
#+end_src

Drag floating windows by holding down $mod and left mouse
button. Resize them with right mouse button + $mod.  Despite the name,
also works for non-floating windows.  Change normal to inverse to use
left mouse button for resizing and right mouse button for dragging.
#+begin_src conf-space
floating_modifier $mod normal
#+end_src

**** Exit
This exits sway (logs you out of your Wayland session).
#+name: exit-commands
| message            | command               |
|--------------------+-----------------------|
| Exit sway(log out) | =swaymsg exit=        |
| Power off          | =systemctl poweroff=  |
| Reboot             | =systemctl reboot=    |
| Hibernate          | =systemctl hibernate= |
| Lock               | =swaylock=            |
#+name: get-exit-arg-commands
#+begin_src elisp :var table=exit-commands :tangle no
  (mapconcat
   (lambda (command)
     (format "-B \'%s\' \'%s\'"
             (car command) (string-trim (cadr command) "=" "=")))
   table " ")
#+end_src
#+begin_src conf-space :noweb yes
  bindsym $mod+Shift+e exec swaynag -m "Exit commands" <<get-exit-arg-commands()>>
#+end_src
*** Moving around
#+NAME: move-keybinds
| key bind          | command     | description             |
|-------------------+-------------+-------------------------|
| $mod+$left        | focus left  | Move focus              |
| $mod+$down        | focus down  |                         |
| $mod+$up          | focus up    |                         |
| $mod+$right       | focus right |                         |
| $mod+Left         | focus left  | Move focus (Vi version) |
| $mod+Down         | focus down  |                         |
| $mod+Up           | focus up    |                         |
| $mod+Right        | focus right |                         |
| $mod+Shift+$left  | move left   | Move focused window     |
| $mod+Shift+$down  | move down   |                         |
| $mod+Shift+$up    | move up     |                         |
| $mod+Shift+$right | move right  |                         |
| $mod+Shift+Left   | move left   | Move focused window     |
| $mod+Shift+Down   | move down   |                         |
| $mod+Shift+Up     | move up     |                         |
| $mod+Shift+Right  | move right  |                         |
#+begin_src conf-space
bindsym <<getallkeyvaluepairs(move-keybinds)>>
#+end_src
*** Workspaces
The noweb shenanigans here are a bit more complicated, that is so
because I don't want to repeat the name of workspaces again and again.
#+name: workspace-config-gen
#+begin_src elisp :var format=switch-workspace-format :wrap src conf-space :tangle no
(mapconcat (lambda (keybind) (format format keybind keybind) ) '(1 2 3 4 5 6 7 8 9 0))
#+end_src
**** Switch Workspaces keybinds
#+name: switch-workspace-format
#+begin_example format
  bindsym $mod+%d workspace number %d
#+end_example
#+begin_src conf-space
<<workspace-config-gen(switch-workspace-format)>>
#+end_src
**** Move focused container to workspace
#+name: move-focused-workspace-format
#+begin_example format
  bindsym $mod+Shift+%d move container to workspace number %d
#+end_example
#+begin_src conf-space
<<workspace-config-gen(move-focused-workspace-format)>>
#+end_src
*** Layout
#+NAME: layout-keybinds
| key bind         | command             | description                                               |
|------------------+---------------------+-----------------------------------------------------------|
| $mod+b           | splith              | horizontal split                                          |
| $mod+v           | splitv              | vertical split                                            |
| $mod+s           | layout stacking     | stacking layout                                           |
| $mod+w           | layout tabbed       | tabbed layout                                             |
| $mod+e           | layout toggle split | toggle split layout                                       |
| $mod+f           | fullscreen          | Make the current focus full screen                        |
| $mod+Shift+space | floating toggle     | Toggle the current focus between tiling and floating mode |
| $mod+space       | focus mode_toggle   | Swap focus between the tiling area and the floating area  |
| $mod+a           | focus parent        | Move focus to the parent container                        |
#+begin_src conf-space
bindsym <<getallkeyvaluepairs(layout-keybinds)>>
#+end_src
*** Scratchpad
#+NAME: scratchpad-keybinds
| key bind         | command         | description                                                            |
|------------------+-----------------+------------------------------------------------------------------------|
| $mod+Shift+minus | move scratchpad | Move the currently focused window to the scratchpad                    |
| $mod+minus       | scratchpad show | Show the next scratchpad window or hide the focused scratchpad window. |

Sway has a "scratchpad", which is a bag of holding for windows. You
can send windows there and get them back later.
#+begin_src conf-space
bindsym <<getallkeyvaluepairs(scratchpad-keybinds)>>
#+end_src
*** Resizing containers
#+NAME: resizing-containers-keybinds
| key bind    | command                   | description                               |
|-------------+---------------------------+-------------------------------------------|
| $mod+$left  | resize shrink width 10px  | Resize the focused containers             |
| $mod+$down  | resize grow height 10px   |                                           |
| $mod+$up    | resize shrink height 10px |                                           |
| $mod+$right | resize grow width 10px    |                                           |
| $mod+Left   | resize shrink width 10px  | Resize the focused containers(arrow keys) |
| $mod+Down   | resize grow height 10px   |                                           |
| $mod+Up     | resize shrink height 10px |                                           |
| $mod+Right  | resize grow width 10px    |                                           |
| Return      | mode "default"            |                                           |
| Escape      | mode "default"            | Return to default mode                    |
#+begin_src conf-space
  mode "resize" {
       bindsym <<getallkeyvaluepairs(resizing-containers-keybinds)>>
  }
  bindsym $mod+r mode "resize"
#+end_src
* FONTS
** Parameters
#+name: font-settings
| variable  | value      |
|-----------+------------|
| font-name | Iosevka NF |
| font-size | 14         |
I set the fonts for everything here, just update this and everything
else is updated.
** Terminal emulator
#+begin_src conf-unix :tangle home/.config/foot/foot.ini  :noweb-prefix no
  [main]
  font=<<getvar(table=font-settings,variable="font-name")>>:size=<<getvar(table=font-settings,variable="font-size")>>
  dpi-aware=yes
#+end_src
** Window manager
#+name: Font
#+begin_src conf-space  :tangle home/.config/sway/config
  font '<<getvar(table=font-settings,variable="font-name")>>' <<getvar(table=font-settings,variable="font-size")>>
#+end_src
** Menu
#+name: menu-font
#+begin_src shell
-f '<<getvar(table=font-settings,variable="font-name")>> <<getvar(table=font-settings,variable="font-size")>>'
#+end_src
* COLORS
** Parameters
#+name: basic-colors
| color      | hexvalue |
|------------+----------|
| background | "000000" |
| foreground | "ffffff" |
| alpha      | 0.65     |
I set the colors for everything here, although sections may have their
own table for some custom colors.
** Terminal emulator
#+begin_src conf-unix :tangle home/.config/foot/foot.ini
  [colors]
  background=<<getvar(table=basic-colors,variable="background")>>
  foreground=<<getvar(table=basic-colors,variable="foreground")>>
  alpha=<<getvar(table=basic-colors,variable="alpha")>>
#+end_src
** Status bar
#+name: statusbar-inactive-colors
| color         | hex value |
|---------------+-----------|
| border        | "505050"  |
| inactive-text | "505050"  |
#+begin_src conf-space :noweb-ref statusbar-colors
statusline #<<getvar(table=basic-colors,variable="foreground")>>
background #<<getvar(table=basic-colors,variable="background")>>
separator #<<getvar(table=basic-colors,variable="foreground")>>
inactive_workspace #<<getvar(table=statusbar-inactive-colors,variable="border")>> #<<getvar(table=basic-colors,variable="background")>> #<<getvar(table=statusbar-inactive-colors,variable="inactive-text")>>
#+end_src
** Lock screen
#+begin_src conf-unix :tangle home/.config/swaylock/config
color=<<getvar(table=basic-colors,variable="background")>>
#+end_src
** Menu
#+begin_src shell :noweb-ref menu-colors
-N <<getvar(table=basic-colors,variable="background")>>
#+end_src
